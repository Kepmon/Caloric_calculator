---
interface Props {
  min: number
  max: number
  value: number
  label: string
  additionalLabel?: string
  // eslint-disable-next-line no-unused-vars
  Icon: (_: Record<string, unknown>) => void
  dataUnit?: string
}

const { min, max, value, label, additionalLabel, Icon, dataUnit } = Astro.props
---

<div class="slider-inputs">
  <div class="label-with-svg">
    <Icon />
    <label for={label}>
      {label.replaceAll('-', ' ')}
      {
        additionalLabel && (
          <span data-span={label} class="input-label">
            ({additionalLabel})
          </span>
        )
      }
    </label>
    <slot />
  </div>
  <input
    type="range"
    name={label}
    id={label}
    min={min}
    max={max}
    value={value}
    step="1"
    data-unit={dataUnit}
  />
  <label class="sr-only" for={`${label}-number`}
    >{`insert numeric value of ${label}`}</label
  >
  <input
    type="number"
    name={label}
    id={`${label}-number`}
    data-input="number"
    min={min}
    max={max}
    value={value.toFixed(0)}
    step="1"
  />

  <p data-error={`${label}-number`} class="error-message"></p>
</div>

<style lang="scss">
  @use '../../sass/_mixins' as *;

  .slider-inputs {
    --slider-height: 1.5;
    --thumb-size: 2rem;
    --thumb-position: 50;
    --thumb-position-percent: calc(var(--thumb-position) * 1%);
    --follow-thumb-position: calc(
      var(--thumb-position-percent) +
        ((50 - var(--thumb-position)) / 100 * var(--thumb-size))
    );
    position: relative;
  }

  input[type='range'] {
    appearance: none;
    position: relative;
    display: block;
    width: 100%;
    height: calc(var(--slider-height) * 1rem);
    background-image: linear-gradient(
      90deg,
      var(--accent-clr) var(--thumb-position-percent),
      var(--input-bg) var(--thumb-position-percent)
    );
    border-radius: var(--border-radius);
    cursor: pointer;

    &::-webkit-slider-thumb {
      appearance: none;
      position: absolute;
      left: var(--follow-thumb-position);
      width: var(--thumb-size);
      aspect-ratio: 1;
      background-color: var(--input-bg);
      border-radius: 50%;
      box-shadow: 0 0 0.25rem hsl(var(--clr-dark-900));
      translate: -50% -50%;
    }
  }

  .error-message {
    position: absolute;
    top: 170%;
    color: hsl(var(--clr-red-400));
    font-weight: 500;
  }
</style>
