---
import Slider from './Slider.astro'
import Age from './svgs/Age.astro'
import Weight from './svgs/Weight.astro'
import Height from './svgs/Height.astro'
import BodyFat from './svgs/BodyFat.astro'
import BodyFatPopupMen from './popups/BodyFatPopupMen.astro'
import BodyFatPopupWomen from './popups/BodyFatPopupWomen.astro'

const calculateMiddleValue = (min: number, max: number) => (max + min) / 2

const slidersData = {
  age: {
    min: 10,
    max: 100,
    label: 'age',
    Icon: Age
  },
  weight: {
    min: 20,
    max: 180,
    label: 'weight',
    Icon: Weight
  },
  height: {
    min: 120,
    max: 220,
    label: 'height',
    Icon: Height
  },
  bodyFat: {
    min: 1,
    max: 55,
    label: 'body-fat',
    Icon: BodyFat,
    additionalLabelContent: true
  }
}
---

<BodyFatPopupMen />
<BodyFatPopupWomen />
<div class="sliders-wrapper">
  {
    Object.keys(slidersData).map((key) => (
      <Slider
        min={slidersData[key as keyof typeof slidersData].min}
        max={slidersData[key as keyof typeof slidersData].max}
        value={calculateMiddleValue(
          slidersData[key as keyof typeof slidersData].min,
          slidersData[key as keyof typeof slidersData].max
        )}
        Icon={slidersData[key as keyof typeof slidersData].Icon}
        label={slidersData[key as keyof typeof slidersData].label}
      >
        {'additionalLabelContent' in
          slidersData[key as keyof typeof slidersData] && (
          <span>
            (show charts for{' '}
            <button
              type="button"
              data-button="body-fat-men"
              data-open="dialog"
              class="popup-label"
            >
              men
            </button>{' '}
            and{' '}
            <button
              type="button"
              data-button="body-fat-women"
              data-open="dialog"
              class="popup-label"
            >
              women
            </button>
            )
          </span>
        )}
      </Slider>
    ))
  }
</div>

<script>
  import { setThumbPosition } from '../helpers/sliders'

  const numberInputs = [
  ...document.querySelectorAll('[type="number"]')
] as HTMLInputElement[]
const sliderInputs = [
  ...document.querySelectorAll('[type="range"]')
] as HTMLInputElement[]

  sliderInputs.forEach((slider, index) => {
    slider.addEventListener('input', () => {
      setThumbPosition(slider, index, sliderInputs, numberInputs)
    })
  })
  numberInputs.forEach((input, index) => {
    input.addEventListener('change', () => {
      setThumbPosition(input, index, sliderInputs)
    })
  })

  window.addEventListener('DOMContentLoaded', () =>
    numberInputs.forEach((input, index) => {
      setThumbPosition(input, index, sliderInputs)
    })
  )
</script>

<style>
  .sliders-wrapper {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(20rem, 1fr));
    gap: 4rem;
  }
</style>
